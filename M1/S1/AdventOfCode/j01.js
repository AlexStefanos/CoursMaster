function weatherMachine() {
    var str = "()()(()()()(()()((()((()))((()((((()()((((()))()((((())(((((((()(((((((((()(((())(()()(()((()()(()(())(()((((()((()()()((((())((((((()(()(((()())(()((((()))())(())(()(()()))))))))((((((((((((()())()())())(())))(((()()()((((()(((()(()(()()(()(()()(()(((((((())(())(())())))((()())()((((()()((()))(((()()()())))(())))((((())(((()())(())(()))(()((((()())))())((()(())(((()((((()((()(())())))((()))()()(()(()))))((((((((()())((((()()((((()(()())(((((()(()())()))())(((()))()(()(()(()((((()(())(()))(((((()()(()()()(()(((())())(((()()(()()))(((()()(((())())(()(())())()()(())()()()((()(((()(())((()()((())()))((()()))((()()())((((()(()()(()(((()))()(()))))((()(((()()()))(()(((())()(()((()())(()(()()(()())(())()(((()(()())()((((()((()))))())()))((()()()()(())()())()()()((((()))))(()(((()()(((((((())()))()((((()((())()(()())(())()))(()(()())(((((((())))(((()))())))))()))())((())(()()((())()())()))))()((()()())(())((())((((()())())()()()(((()))())))()()))())(()()()(()((((((()()))())()))()(((()(((())((((()()()(()))())()()))))())()))())((())()())(((((())())((())())))(((())(((())(((((()(((((())(()(()())())(()(())(()))(()((((()))())()))))())))((()(()))))())))(((((())()))())()))))()))))(((()))()))))((()))((()((()(()(())()())))(()()()(())()))()((((())))))))(())(()((()()))(()))(()))(()((()))))))()()((((()()))()())()))))))()()()))(()((())(()))((()()()())()(((()((((())())))()((((()(()))))))())))()()())()))(()))))(()())()))))))((())))))))())()))()((())())))(()((()))()))(())))))(()))()())()()))((()(()))()()()()))))())()()))())(())()()))()))((()))))()()(()())))))()()()))((((()))()))))(()(())))(()())))((())())(()))()))))()())))()())()())))))))))()()))))())))((())((()))))())))(((()())))))))(()))()()))(()))()))))()())))))())((((()())))))))())))()()))))))))()))()))))()))))))(())))))))))())))))))))))))))())())((())))))))))()))((())))()))))))))())()(()))))))())))))()()()())()(()()()(()())(()))()()()(()())))())())))()))))())))))))()()()()())(())())()())()))))(()()()()()))))()))())())))((()())()())))()))()))))(()())))()))))))))(((()))()()))))))))))))))))))))(()))(()((()))())))())(()))(()(()(())))))()(()))()))()()))))))))))))()((()())(())())()(())))))())()())((()()))))(()()))))())()(())()))))))))))))))))))))()))(()(()())))))))()()((()))()))))))((())))()))))))))((()))())()()))())()()))((()))())))))))))))(()())()))(())((()(()()))(()())(())))()())(()(())()()))))()))()(()))))))(()))))))))))(()))())))))))))())))))())))(())))))()))))(())())))))))))()(()))))()())))())(()))()())))))))))))))())()()))))()))))))())))))()))))(())(()()()()((())()))())(()))((())()))())())(())(()()))))()))(())()()((())(())))(())))()))())))))))))()(((((())())))(())()))))(())))((()))()(((((((()))))()()))(())))))()(()))))(()()))()))())))))))(()())()))))))))())))(()))())()))(())()((())())()())())(()(()))))()))))))((()())(())()()(()())))()()))(())(())(()))())))()))(()))()()))((((()))))()))((()()()))))()))()))())))(()))()))))(())))()))())()(()))()())))())))))))())))())))()()))))))(()))())())))()))()()())())))))))))))))())))()))(()()))))())))())()(())))())))))))))))))))))()()())())))))()()()((()(()))()()(())()())()))()))))()()()))))))((()))))))))()(()(()((((((()()((()())))))))))))()))())))))((())())(()))())))())))))())()()())(())))())))()())())(())))))))()()(())))()))())))())())())()))))))))()))(()()()())())())))(())())))))))()()())()))))())))())()(())())))))))()())()))(()()(())())))()(()((()()((()()(((((())(()())()))(())()))(())))(())))))))()))()))((()))()))()))))))))()))))))))((()()())(()))(((()))(())))()))((())(((())))()())))())))))((())))))(())())((((((())())()(()))()(()((()())))((())()(()(()))))(())(()()())(())))())((()(((())())))(((()())())))())()(())())((((()()))))())((()))()()()()(())(((((((()()()((()))())(()())))(())())((((()()(()))))()((())))((())()))()(((()))())))()))((()(()))(())(()((((())((((()()(()()))(((())(()))))((((()(()))(())))))((()))(()))((()(((()(()))(()(()((()(())(()(()(()(()()((()))())(((())(()(()))))(()))()()))(())))(())()(((())(()))()((((()()))))())(()))))((())()((((()(((()))())())(((()))()())((())(())())(())()(())()(()()((((((()()))))()()(((()()))))()())()(((()(()))(()(()())(()(()))))(((((()(((())())))))(((((()((()()((())())((((((()(())(()()((()()()()()()()(()()))()(((()))()))(((((((())(((()((()())()((((())(((()(())))()((()(()()()((())((()())()))()))())))())((((((()))(()(()()()))(()((()(()(()))()((()(((()()()((())(((((())()(()))())())((()(())))(()(()())(())((())())())(((()()()(())))))())(()))))))()))))))())((()()()))((()((((((()))(((()((((()()()(((()))())()(()()(((()((()()()()())()()))()()()(()(())((()))))(()))())))))))()(()()(((((())()(()(((((()((()(()()())(()((((((((()((((((())()((((()()()((()((()((((((()))((())))))))())()))((()(()))()(()()(()((())((()()((((((((((((()())(()()()))((((()((((((())(()))())(()()((()()))()(((((((()((()()((((((()(((())))((())))((((((((()()(((((((())(((((()())(((())((())()((((()(((((((()(()(((()((((((()(((()(((((((((((()()((()()(()))((()()(((()(((())))((((())()(()(((())()(()(((())(((((((((((()))())))((((((())((()()((((()())())((((()()))((())(((((()(()()(()()()((())(()((()()((((()(((((()((()(()((((()())((((((()(((((()()(()(()((((())))(())(())(())((((()(()()((((()((((()()((()((((((())))(((((()))))()))(()((((((((()(((())())(((())))(()(()((())(((()((()()(((((()((()()(((())()(()))(((((((())(()(((((()))((()((()((()))(())())((((()((((())()(()))(((()(((((((((((((((())(((((((((()))(((()(()()()()((((((()((())()((((((((()(())(((((((((((()(()((())()((()()(()(()()((((()()((())(()((()()(()()((((()(((((((())))((((())(())()(((()()((()()((((()((()(((()((())(((()()()((((()((((()()(()(()((((((((())(()(((((())(()())(((((((()())()(()((((()((())(()()())((((()()(((()((((())(())(()()(((((((((()()))()(((())(()(()((((((())(()()())(()))()()(((()(((()((())(()(((((((()(()(()((()(((((()(()((()(()((((((()((((()()((((()(((()((())(()(()((()()((((()()(())()(())(((())(()((((((((()())(((((((((()(())()((((())))()))()()(((((()()((((((())(()()(((()(()(((((((()(()(((((((())(())((((()((()(())))((((()()())(()))((()())((((()(((((()(()(())(()(()()())(((((()(((((()((((()()((((((((()()))(()((((((())((((())()(()(((()()()(((()(()(())(())(((((()(())())((((())(())(()(((()(((((())((((())())((()(((((((()(((())(()(()))(((((((((()((()((()()(()((((())(((()((())((((())(()(((()(((()(()((((()(((())(()(((()(()()(()(()((()()(()())(())())((()(()(((()(((()(((()()(((((((((()(((((((((()()(((()(((()())((((()(()(((()()()((())((((((((((())(()(((()((((()())((((()((()))(((()()()(((((()(((((((())((()())(()((((())((((((((())(()((()((((((((((()()((()((()()))(((()())()())()(((()())()()(()(()(((((((())()))(())()))())()()((())()((()((((()((()((())(((((()((((((()(())))(()))())(((()))((()()(()(((()))((((())()(((()))))()(()(())()(((((())(()(()(())(())()((()()()((((()(())((()())(()(()))(()(()(()()(())()()(()((())()((()))))()))((()(()()()()((()())(()))())()(()(((((((((())())((()((()((((((())()((((())(((())((()(()()()((())(()((())(((()((((()()((()(()(((((())()))()((((((()))((())(((()()))(((())(())()))(((((((())(())())()(())(((((()))()((()))()(()()((()()()()()())((((((("
    var count = 0
    for(let i = 0; i < str.length; i++) {
        if(str.charAt(i) == '(') {
            count += 1;
        } 
        if(str.charAt(i) == ')') {
            count -= 1;
        }
        if(count == -1) {
            console.log(i);
        }
    }
    console.log(count)
}

function trebuchet() {
    const fs = require("fs")
    fs.readFile("j01.txt", (err, data) => {
        if(err) throw err;
        var str = data.toString()
        var count = 0
        var countLastI = 0
        var total = 0
        var nb_1 = ""
        var nb_2 = ""
        var nbFinal_1 = 0
        var nbFinal_2 = 0
        var number_1_index = 0
        var number_2_index = 0
        var number_1 = ""
        var number_2 = ""
        var index_1 = []
        var index_2 = []
        var indexNumbers_1 = []
        var indexNumbers_2 = []
        var indexMin_1 = Number.MAX_VALUE
        var indexMax_2 = Number.MIN_VALUE
        var indexMinNb_1 = 0
        var indexMaxNb_2 = 0
        var nb = ""
        const numbers = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
        const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        const charDigits = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
        str.split(/\r?\n/).forEach((line) => {
            for(let i = 0; i < line.length; i++) {
                if(charDigits.includes(line.charAt(i))) {
                    if(count == 0) {
                        nb_1 = line.charAt(i)
                        indexMinNb_1 = i
                        count += 1
                    }
                    nb_2 = line.charAt(i)
                    indexMaxNb_2 = i
                }
            }
            numbers.forEach((number) => {
                if(line.includes(number)) {
                    if(line.indexOf(number) < line.indexOf(nb_1)) {
                        numbers.forEach((elem) => {
                            if(elem == number) {
                                index_1.push(line.indexOf(number))
                                indexNumbers_1.push(elem)
                            }
                        })
                        number_1_index = line.indexOf(number)
                    }
                    if(line.indexOf(number) > line.indexOf(nb_2)) {
                        if(line.indexOf(number) > number_2_index) {
                            numbers.forEach((elem) => {
                                if(elem == number) {
                                    index_2.push(line.indexOf(number))
                                    indexNumbers_2.push(elem)
                                }
                            })
                        }
                        number_2_index = line.indexOf(number)
                    }
                }
            })
            if(index_1.length > 0) {
                indexMin_1 = index_1[0]
                for(let k = 0; k < index_1.length; k++) {
                    if(indexMin_1 > index_1[k]) {
                        indexMin_1 = index_1[k]
                    }
                }
                number_1 = digits[numbers.indexOf(indexNumbers_1[index_1.indexOf(indexMin_1)])].toString()
            }
            if(index_2.length > 0) {
                indexMax_2 = index_2[0]
                for(let k = 0; k < index_2.length; k++) {
                    if(indexMax_2 < index_2[k]) {
                        indexMax_2 = index_2[k]
                    }
                }
                number_2 = digits[numbers.indexOf(indexNumbers_2[index_2.indexOf(indexMax_2)])].toString()
            }
            if(indexMin_1 < indexMinNb_1) {
                nbFinal_1 = number_1
            } else {
                nbFinal_1 = nb_1
            }
            if(indexMax_2 > indexMaxNb_2) {
                nbFinal_2 = number_2
            } else {
                nbFinal_2 = nb_2
            }
            nb = nbFinal_1 + nbFinal_2
            console.log("-------------------")
            console.log(line)
            console.log("number_1 : " + number_1)
            console.log("number_2 : " + number_2)
            console.log("nbFinal_1 : " + nbFinal_1)
            console.log("nbFinal_2 : " + nbFinal_2)
            console.log("nb : " + nb)
            total += Number(nb)
            nb_1 = ""
            nb_2 = ""
            number_1 = ""
            number_2 = ""
            nb = ""
            count = 0
            number_1_index = 0
            number_2_index = 0
            index_1 = []
            index_2 = []
            indexNumbers_1 = []
            indexNumbers_2 = []
            indexMin_1 = Number.MAX_VALUE
            indexMax_2 = Number.MIN_VALUE
            nbFinal_1 = 0
            nbFinal_2 = 0
            indexMinNb_1 = 0
            indexMaxNb_2 = 0
        })
        console.log(total)
    })
}

trebuchet()